#include <stdio.h>
#define capacity 5
int stack[capacity];
int top=-1;
int isfull()
{
    if(top==capacity)
    return 1;
    else
    return 0;
}

int isempty()
{
    if(top==-1)
    return 1;
    else
    return 0;
}

int push( int data)             // care about declaring datatype for parameters
{
    top++;
    if(!isfull())
    stack[top]=data;
    else
    printf("Stack is full"); 
   
}

int pop()
{
    int data;
    if(!isempty())
    {
      data=stack[top];
      printf(" data taken outside is %d\n",data);
      top--;
      printf(" now top element is %d\n",stack[top]);
      
    }
    else
      printf("Stack is empty"); 
}

int peek()            // to read the top element
{
    int data;
    if(!isempty())
    {
        data=stack[top]; 
         return data;               // no top-- operation bcz no need to pop the data
    }
    else
    {
         printf("Stack is empty");
    }
}

int traversal()
{
    
    if(!isempty())
    {
     int i;
    for(i=0;i<capacity;i++)
    {
        printf("%d\n",stack[i]);
    }   
    }
    else
    {
        printf("Stack is empty");
    }
    
}

int main()
{
    push(3);
    push(4);
    push(5);
    push(6);
    push(7);               // 7 is taken outside now top element is 6
                       
    pop();
    peek();
    traversal();
    printf("%d %d %d %d %d %d",stack[0],stack[1],stack[2],stack[3],stack[4],stack[5]);
    
}
